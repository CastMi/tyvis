
// Copyright (c) 1996-2003 The University of Cincinnati.
// All rights reserved.

// UC MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
// SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// OR NON-INFRINGEMENT.  UC SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY
// LICENSEE AS A RESULT OF USING, RESULT OF USING, MODIFYING OR
// DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.

// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the U.S.,
// and the terms of this license.

// You may modify, distribute, and use the software contained in this
// package under the terms of the "GNU LIBRARY GENERAL PUBLIC LICENSE"
// version 2, June 1991. A copy of this license agreement can be found in
// the file "LGPL", distributed with this archive.

// Authors: Philip A. Wilsey    philip.wilsey@ieee.org
//          Dale E. Martin      dmartin@cliftonlabs.com

//---------------------------------------------------------------------------

#include "TyvisDesignFile.hh"
#include "TyvisPhysicalLiteral.hh"
#include "TyvisPhysicalUnit.hh"
#include "TyvisIdentifier.hh"
#include "TyvisUnitList.hh"
#include "savant/resolution_func.hh"
#include "savant/error_func.hh"
#include "savant/set.hh"
#include "TyvisPhysicalTypeDefinition.hh"
#include "savant/savant.hh"
#include "published_file.hh"
#include <sstream>

void 
TyvisPhysicalLiteral::_publish_cc_rvalue( published_file &_cc_out, PublishData *declarations ) {
  CC_REF( _cc_out, "TyvisPhysicalLiteral::_publish_cc_rvalue" );

  Tyvis::_publish_cc_include( _cc_out, "tyvis/PhysicalLiteral.hh" );

  _cc_out << "PhysicalLiteral" << OS("(");
  if( _get_subtype() != 0 ){
    _get_subtype()->_publish_cc_type_info_xxx( _cc_out, declarations );
    _cc_out << "," << NL();
  }
  _publish_cc_value( _cc_out, declarations );
  _cc_out << "," << NL()
	  << "\"";
  _publish_cc_unit_name( _cc_out, declarations );
  _cc_out << "\"" << CS(")");
}

void
TyvisPhysicalLiteral::_publish_cc_universal_type( published_file &_cc_out, PublishData * ) {
  _cc_out << "PhysicalLiteral";
}

void
TyvisPhysicalLiteral::_publish_cc_universal_value( published_file &_cc_out, PublishData *declarations ) {
  CC_REF( _cc_out, "TyvisPhysicalLiteral::_publish_cc_universal_value" );
  _publish_cc_rvalue( _cc_out, declarations );
}

void 
TyvisPhysicalLiteral::_publish_cc_state_object_init( published_file &_cc_out, PublishData *declarations ) {
  _cc_out << "new ";
  _publish_cc_rvalue( _cc_out , declarations );
  _cc_out << ",";
}

void
TyvisPhysicalLiteral::_publish_cc_state_l_object_init( published_file &_cc_out,
						     PublishData *declarations ) {
  _publish_cc_state_object_init( _cc_out, declarations );
}

void
TyvisPhysicalLiteral::_publish_cc_elaborate( published_file &_cc_out, PublishData *declarations ){
  _cc_out << "UniversalLongLongInteger";
  _publish_cc_value( _cc_out, declarations );
}

void 
TyvisPhysicalLiteral::_publish_cc_wait_data( published_file &_cc_out, PublishData *declarations ) {
  _publish_cc_rvalue( _cc_out , declarations );
}

void 
TyvisPhysicalLiteral::_publish_cc_value( published_file &_cc_out, PublishData *declarations ) {
  ASSERT ( _get_unit_name() != NULL );
  ASSERT ( _get_unit_name()->_get_physical_type() != NULL );
  
  if(_get_abstract_literal() != NULL) {
    _get_abstract_literal()->_publish_cc_value( _cc_out, declarations );
  }
  else {
    _cc_out << "1";
  }
}

void 
TyvisPhysicalLiteral::_publish_cc_unit_name( published_file &_cc_out, PublishData *declarations ) {
  _get_unit_name()->_get_declarator()->_publish_cc_rvalue( _cc_out , declarations );
}

void
TyvisPhysicalLiteral::_publish_cc_initialization_value( published_file &_cc_out, PublishData *declarations ) {
  _publish_cc_rvalue( _cc_out, declarations );
}

void
TyvisPhysicalLiteral::_publish_cc_headers( published_file &_cc_out ) {
  _get_unit_name()->_get_physical_type()->_publish_cc_headers( _cc_out );
}

void
TyvisPhysicalLiteral::_get_list_of_input_signals(  savant::set<Tyvis> * ){
  // Nothing to be done here.  This needs to be here since
  // TyvisPhysicalLiteral is derived from TyvisExpression.  This merely
  // serves to suppress the message generated by
  // _report_undefined_fn()
}

Tyvis *
TyvisPhysicalLiteral::_get_abstract_literal() {
  return dynamic_cast<Tyvis *>(get_abstract_literal());
}

TyvisPhysicalUnit *
TyvisPhysicalLiteral::_get_unit_name() {
  return dynamic_cast<TyvisPhysicalUnit *>(get_unit_name());
}
