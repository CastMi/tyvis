package STANDARD is

type CHARACTER is (
    NUL, SOH, STLHS, ETLHS, EOT, ENQ, ACK, BEL,
    BS,  HT,  LF,  VT,  FF,  CR,  SO,  SI,
    DLE, DC1, DC2, DC3, DC4, NAK, SYN, ETB,
    CAN, EM,  SUB, ESC, FSP, GSP, RSP, USP, 

    ' ', '!', '"', '#', '$', '%', '&', ''',
    '(', ')', '*', '+', ',', '-', '.', '/',
    '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', ':', ';', '<', '=', '>', '?',

    '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
    'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
    'X', 'Y', 'Z', '[', '\', ']', '^', '_',

    '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
    'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
    'x', 'y', 'z', '{', '|', '}', '~', DEL);

type INTEGER is range -2147483648 to +2147483647;

attribute HIGH : INTEGER;
attribute HIGH of INTEGER : type is 2147483647;

subtype POSITIVE is INTEGER range 1 to INTEGER'HIGH;

type STRING is array ( POSITIVE range <> ) of CHARACTER;
attribute FOREIGN : STRING;

type BOOLEAN is (FALSE, TRUE);

function "and" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "or" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "nand" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "nor" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "xor" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "xnor" (LHS, RHS: BOOLEAN) return BOOLEAN;

function "not" (RHS: BOOLEAN) return BOOLEAN;

function "=" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "/=" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "<" (LHS, RHS: BOOLEAN) return BOOLEAN;
function "<=" (LHS, RHS: BOOLEAN) return BOOLEAN;
function ">" (LHS, RHS: BOOLEAN) return BOOLEAN;
function ">=" (LHS, RHS: BOOLEAN) return BOOLEAN;

type BIT is ('0', '1');

function "and" (LHS, RHS: BIT) return BIT;
function "or" (LHS, RHS: BIT) return BIT;
function "nand" (LHS, RHS: BIT) return BIT;
function "nor" (LHS, RHS: BIT) return BIT;
function "xor" (LHS, RHS: BIT) return BIT;
function "xnor" (LHS, RHS: BIT) return BIT;

function "not" (RHS: BIT) return BIT;

function "=" (LHS, RHS: BIT) return BOOLEAN;
function "/=" (LHS, RHS: BIT) return BOOLEAN;
function "<" (LHS, RHS: BIT) return BOOLEAN;
function "<=" (LHS, RHS: BIT) return BOOLEAN;
function ">" (LHS, RHS: BIT) return BOOLEAN;
function ">=" (LHS, RHS: BIT) return BOOLEAN;

function "=" (LHS, RHS: CHARACTER) return BOOLEAN;
function "/=" (LHS, RHS: CHARACTER) return BOOLEAN;
function "<" (LHS, RHS: CHARACTER) return BOOLEAN;
function "<=" (LHS, RHS: CHARACTER) return BOOLEAN;
function ">" (LHS, RHS: CHARACTER) return BOOLEAN;
function ">=" (LHS, RHS: CHARACTER) return BOOLEAN;

type SEVERITY_LEVEL is (NOTE, WARNING, ERROR, FAILURE);

function "=" (LHS, RHS: SEVERITY_LEVEL) return BOOLEAN;
function "/=" (LHS, RHS: SEVERITY_LEVEL) return BOOLEAN;
function "<" (LHS, RHS: SEVERITY_LEVEL) return BOOLEAN;
function "<=" (LHS, RHS: SEVERITY_LEVEL) return BOOLEAN;
function ">" (LHS, RHS: SEVERITY_LEVEL) return BOOLEAN;
function ">=" (LHS, RHS: SEVERITY_LEVEL) return BOOLEAN;

-- predefined numeric types:
type REAL is range -0.179769313486231e+309 to +0.179769313486231e+309;

function "**" (LHS : INTEGER; RHS: INTEGER) return INTEGER;
function "**" (LHS : REAL; RHS: INTEGER) return REAL;

function "=" (LHS, RHS: INTEGER) return BOOLEAN;
function "/=" (LHS, RHS: INTEGER) return BOOLEAN;
function "<" (LHS, RHS: INTEGER) return BOOLEAN;
function "<=" (LHS, RHS: INTEGER) return BOOLEAN;
function ">" (LHS, RHS: INTEGER) return BOOLEAN;
function ">=" (LHS, RHS: INTEGER) return BOOLEAN;

function "+" (RHS: INTEGER) return BOOLEAN;
function "-" (RHS: INTEGER) return BOOLEAN;
function "abs" (RHS: INTEGER) return BOOLEAN;

function "+" (LHS, RHS: INTEGER) return INTEGER;
function "-" (LHS, RHS: INTEGER) return INTEGER;
function "*" (LHS, RHS: INTEGER) return INTEGER;
function "/" (LHS, RHS: INTEGER) return INTEGER;
function "mod" (LHS, RHS: INTEGER) return INTEGER;
function "rem" (LHS, RHS: INTEGER) return INTEGER;

-- The actual definition is above - this appears here for Unformity
-- type REAL is range -0.179769313486231e+309 to +0.179769313486231e+309;

function "**" (LHS : REAL; RHS: INTEGER) return REAL;

function "=" (LHS, RHS: REAL) return BOOLEAN;
function "/=" (LHS, RHS: REAL) return BOOLEAN;
function "<" (LHS, RHS: REAL) return BOOLEAN;
function "<=" (LHS, RHS: REAL) return BOOLEAN;
function ">" (LHS, RHS: REAL) return BOOLEAN;
function ">=" (LHS, RHS: REAL) return BOOLEAN;

function "+" (RHS: REAL) return BOOLEAN;
function "-" (RHS: REAL) return BOOLEAN;
function "abs" (RHS: REAL) return BOOLEAN;

function "+" (LHS, RHS: REAL) return REAL;
function "-" (LHS, RHS: REAL) return REAL;
function "*" (LHS, RHS: REAL) return REAL;
function "/" (LHS, RHS: REAL) return REAL;
function "mod" (LHS, RHS: REAL) return REAL;
function "rem" (LHS, RHS: REAL) return REAL;

-- predefined type TIME:

--type TIME is range -9223372036854775807 to +9223372036854775807
type TIME is range -2147483648 to +2147483647
    units
        fs;                -- femtosecond 
        ps  = 1000 fs;     -- picosecond 
        ns  = 1000 ps;     -- nanosecond 
        us  = 1000 ns;     -- microsecond 
        ms  = 1000 us;     -- millisecond 
        sec = 1000 ms;     -- second 
        min =   60 sec;    -- minute
        hr  =   60 min;    -- hour
    end units;

function "=" (LHS, RHS: TIME) return BOOLEAN;
function "/=" (LHS, RHS: TIME) return BOOLEAN;
function "<" (LHS, RHS: TIME) return BOOLEAN;
function "<=" (LHS, RHS: TIME) return BOOLEAN;
function ">" (LHS, RHS: TIME) return BOOLEAN;
function ">=" (LHS, RHS: TIME) return BOOLEAN;

function "+" (RHS: TIME) return BOOLEAN;
function "-" (RHS: TIME) return BOOLEAN;
function "abs" (RHS: TIME) return BOOLEAN;

function "+" (LHS, RHS: TIME) return TIME;
function "-" (LHS, RHS: TIME) return TIME;

function "*" (LHS : TIME; RHS: TIME) return TIME;
function "*" (LHS : TIME; RHS: INTEGER) return TIME;
function "*" (LHS : TIME; RHS: REAL) return TIME;
function "*" (LHS : INTEGER; RHS: TIME) return TIME;

function "/" (LHS : REAL; RHS: REAL) return TIME;
function "/" (LHS, RHS: TIME) return INTEGER;

subtype DELAY_LENGTH is TIME range 0 to TIME'HIGH;

-- function that returns the current simulation time:

impure function NOW return TIME;

-- predefined numeric subtypes:

subtype NATURAL is INTEGER range 0 to INTEGER'HIGH;


-- predefined array types:

-- type STRING is array ( POSITIVE range <> ) of CHARACTER;

function "=" (LHS, RHS: STRING) return BOOLEAN;
function "/=" (LHS, RHS: STRING) return BOOLEAN;
function "<" (LHS, RHS: STRING) return BOOLEAN;
function "<=" (LHS, RHS: STRING) return BOOLEAN;
function ">" (LHS, RHS: STRING) return BOOLEAN;
function ">=" (LHS, RHS: STRING) return BOOLEAN;

function "&" ( LHS : STRING ; RHS : STRING ) return STRING;
function "&" ( LHS : STRING ; RHS : CHARACTER ) return STRING;
function "&" ( LHS : CHARACTER ; RHS : STRING ) return STRING;
function "&" ( LHS : CHARACTER ; RHS : CHARACTER ) return STRING;

type BIT_VECTOR is array ( NATURAL range <> ) of BIT;

function "and" (LHS, RHS: BIT_VECTOR) return BIT_VECTOR;
function "or" (LHS, RHS: BIT_VECTOR) return BIT_VECTOR;
function "nand" (LHS, RHS: BIT_VECTOR) return BIT_VECTOR;
function "nor" (LHS, RHS: BIT_VECTOR) return BIT_VECTOR;
function "xor" (LHS, RHS: BIT_VECTOR) return BIT_VECTOR;
function "xnor" (LHS, RHS: BIT_VECTOR) return BIT_VECTOR;

function "not" (RHS: BIT_VECTOR) return BIT_VECTOR;

function "sll" (LHS: BIT_VECTOR; RHS: INTEGER) return BIT_VECTOR;
function "slr" (LHS: BIT_VECTOR; RHS: INTEGER) return BIT_VECTOR;
function "sla" (LHS: BIT_VECTOR; RHS: INTEGER) return BIT_VECTOR;
function "sra" (LHS: BIT_VECTOR; RHS: INTEGER) return BIT_VECTOR;
function "rol" (LHS: BIT_VECTOR; RHS: INTEGER) return BIT_VECTOR;
function "ror" (LHS: BIT_VECTOR; RHS: INTEGER) return BIT_VECTOR;

function "=" (LHS, RHS: BIT_VECTOR) return BOOLEAN;
function "/=" (LHS, RHS: BIT_VECTOR) return BOOLEAN;
function "<" (LHS, RHS: BIT_VECTOR) return BOOLEAN;
function "<=" (LHS, RHS: BIT_VECTOR) return BOOLEAN;
function ">" (LHS, RHS: BIT_VECTOR) return BOOLEAN;
function ">=" (LHS, RHS: BIT_VECTOR) return BOOLEAN;

function "&" ( LHS : BIT_VECTOR ; RHS : BIT_VECTOR ) return BIT_VECTOR;
function "&" ( LHS : BIT_VECTOR ; RHS : BIT ) return BIT_VECTOR;
function "&" ( LHS : BIT ; RHS : BIT_VECTOR ) return BIT_VECTOR;
function "&" ( LHS : BIT ; RHS : BIT ) return BIT_VECTOR;

-- The predefined type for opening files

type FILE_OPEN_KIND is (
	READ_MODE,	-- Resulting access is read-only
	WRITE_MODE,     -- Resulting access is write-only
	APPEND_MODE     -- Resulting access is write-only; information
	);		-- is appended to the end of the existing file.

function "=" (LHS, RHS: FILE_OPEN_KIND) return BOOLEAN;
function "/=" (LHS, RHS: FILE_OPEN_KIND) return BOOLEAN;
function "<" (LHS, RHS: FILE_OPEN_KIND) return BOOLEAN;
function "<=" (LHS, RHS: FILE_OPEN_KIND) return BOOLEAN;
function ">" (LHS, RHS: FILE_OPEN_KIND) return BOOLEAN;
function ">=" (LHS, RHS: FILE_OPEN_KIND) return BOOLEAN;

type FILE_OPEN_STATUS is (
	OPEN_KIND,	-- File open was successful
	STATUS_ERROR,   -- File object was already open
	NAME_ERROR,	-- External file not found or inaccessible
	MODE_ERROR	-- Could not open file with requested access
	);		-- mode

function "=" (LHS, RHS: FILE_OPEN_STATUS) return BOOLEAN;
function "/=" (LHS, RHS: FILE_OPEN_STATUS) return BOOLEAN;
function "<" (LHS, RHS: FILE_OPEN_STATUS) return BOOLEAN;
function "<=" (LHS, RHS: FILE_OPEN_STATUS) return BOOLEAN;
function ">" (LHS, RHS: FILE_OPEN_STATUS) return BOOLEAN;
function ">=" (LHS, RHS: FILE_OPEN_STATUS) return BOOLEAN;

end STANDARD;


------------------------------------------------------------------------
-- Copyright (c) 1988 by
-- The Institute of Electrical and Electronics Engineers, Inc.
-- 345 East 47th Street, New York, NY 10017-2394, USA
------------------------------------------------------------------------

package TEXTIO is

-- Type Definitions for Text I/O

type LINE is access STRING;
type TEXT is file of STRING;
type SIDE is (RIGHT, LEFT);
subtype WIDTH is NATURAL;

-- Standard Text Files

file INPUT:  TEXT open READ_MODE is  "stdin";
file OUTPUT: TEXT open WRITE_MODE is "stdout";

-- Input Routines for Standard Types

procedure READLINE(variable F: in TEXT; L: inout LINE);

procedure READ(L: inout LINE; VALUE: out BIT;         GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out BIT);         

procedure READ(L: inout LINE; VALUE: out BIT_VECTOR;  GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out BIT_VECTOR);

procedure READ(L: inout LINE; VALUE: out BOOLEAN;     GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out BOOLEAN);    

procedure READ(L: inout LINE; VALUE: out CHARACTER;   GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out CHARACTER); 

procedure READ(L: inout LINE; VALUE: out INTEGER;     GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out INTEGER);   

procedure READ(L: inout LINE; VALUE: out REAL;        GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out REAL);      

procedure READ(L: inout LINE; VALUE: out STRING;      GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out STRING);    

procedure READ(L: inout LINE; VALUE: out TIME;        GOOD: out BOOLEAN);
procedure READ(L: inout LINE; VALUE: out TIME);      

-- Output Routines for Standard Types

procedure WRITELINE(F: out TEXT; L: inout LINE);
   
procedure WRITE(L: inout LINE; VALUE: in BIT;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0);

procedure WRITE(L: inout LINE; VALUE: in BIT_VECTOR;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0);

procedure WRITE(L: inout LINE; VALUE: in BOOLEAN;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0);

procedure WRITE(L: inout LINE; VALUE: in CHARACTER;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0);

procedure WRITE(L: inout LINE; VALUE: in INTEGER;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0);

procedure WRITE(L: inout LINE; VALUE: in REAL;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0;
                DIGITS: in NATURAL := 0);

procedure WRITE(L: inout LINE; VALUE: in STRING;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0);

procedure WRITE(L: inout LINE; VALUE: in TIME;
                JUSTIFIED: in SIDE := RIGHT; FIELD: in WIDTH := 0;
                UNIT: in TIME := ns);

-- File Position Predicate

function ENDLINE(L: in LINE) return BOOLEAN;
function ENDFILE(F: in TEXT) return BOOLEAN;

end TEXTIO;

